(function(fs) {

    var root = window;
    var ua = navigator.userAgent.toLowerCase();

    var getQueryString = function(name) {
        let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        let r = root.location.search.substr(1).match(reg);
        if (r != null) return r[2];
        return null;
    }

    fs.isApp = /fstop/.test(ua) || getQueryString('device') ? true : false;
    fs.isIos = !!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
    fs.getQueryString = getQueryString;

    /* 封装ajax函数
     * @param {string}opt.type http连接的方式，包括POST和GET两种方式
     * @param {string}opt.url 发送请求的url
     * @param {boolean}opt.async 是否为异步请求，true为异步的，false为同步的
     * @param {object}opt.data 发送的参数，格式为对象类型
     * @param {function}opt.success ajax发送并接收成功调用的回调函数
     */
    function ajax(opt) {
        opt = opt || {};
        opt.method = opt.method.toUpperCase() || 'POST';
        opt.url = opt.url || '';
        opt.async = opt.async || true;
        opt.data = opt.data || null;
        opt.success = opt.success || function() {};
        var xmlHttp = null;
        if (XMLHttpRequest) {
            xmlHttp = new XMLHttpRequest();
        } else {
            xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');
        }
        var params = [];
        for (var key in opt.data) {
            params.push(key + '=' + opt.data[key]);
        }
        var postData = params.join('&');
        if (opt.method.toUpperCase() === 'POST') {
            xmlHttp.open(opt.method, opt.url, opt.async);
            xmlHttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
            xmlHttp.send(postData);
        } else if (opt.method.toUpperCase() === 'GET') {
            xmlHttp.open(opt.method, opt.url + '?' + postData, opt.async);
            xmlHttp.send(null);
        }
        xmlHttp.onreadystatechange = function() {
            if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
                opt.success(xmlHttp.responseText);
            }
        };
    }
    fs.ajax = ajax;
    window.FS = fs;

})(typeof FS != 'undefined' ? FS : {});
(function(fs) {
    var root = window;
    var ua = navigator.userAgent.toLowerCase();
    var _registers = [];
    var _id = 0;

    function setupWebViewJavascriptBridge(callback) {
        if (root.WebViewJavascriptBridge) { return callback(WebViewJavascriptBridge); }
        if (root.WVJBCallbacks) { return root.WVJBCallbacks.push(callback); }
        root.WVJBCallbacks = [callback];
        var WVJBIframe = document.createElement('iframe');
        WVJBIframe.style.display = 'none';
        WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';
        document.documentElement.appendChild(WVJBIframe);
        setTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)
    }
    root.setupWebViewJavascriptBridge = setupWebViewJavascriptBridge;

    //H5调APP方法
    function handlerHtmlMessage(options, callback) {
        register(callback);
        if (fs.isIos) {
            root.setupWebViewJavascriptBridge(function(bridge) {
                bridge.callHandler('handlerHtmlMessage', options, function(responseData) {})
            })
        } else {
            root.fullShare.handlerHtmlMessage(JSON.stringify(options));
        }
    }
    fs.handlerHtmlMessage = handlerHtmlMessage;

    // app调H5具体方法
    function setHtml(data) {
        for (var i = 0; i < _registers.length; i++) {
            _registers[i].callback(data);
        }
    }
    // ---安卓调H5回调
    if (root.fullShare) {
        root.fullShare.setHtml = setHtml;
    } else {
        root.fullShare = {};
        root.fullShare.setHtml = setHtml;
    }
    // ---IOS调H5回调
    if (fs.isIos) {
        root.setupWebViewJavascriptBridge(function(bridge) {
            bridge.registerHandler('setHtml', function(data, responseCallback) {
                console.log('JS方法被调用:' + data);
                setHtml(data);
            })
        })
    }
    fs.setHtml = root.fullShare.setHtml;

    var register = function(callback) {
        if (typeof callback == 'function') {
            _registers.push({ id: 'fsRegster_' + _id++, callback: callback });
        } else {
            console.warn('the callback should be a function');
        }
    }
    fs.register = register;
    root.FS = fs;
})(typeof FS != 'undefined' ? FS : {});